# docker-compose.yaml
x-airflow-common: &airflow-common
  # Imagem do Airflow: construir localmente via Dockerfile em airflow-pipeline/Dockerfile
  build:
    context: .
    dockerfile: ./dockerfiles/Dockerfile.airflow

  env_file:
    - .env # Carrega variáveis de ambiente como OPENAI_API_KEY e AIRFLOW_UID
  environment:
    &airflow-common-env
    # Configs Core Airflow
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    # Novos DAGs não ficam pausados por padrão
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    # Configs de Banco de Dados
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    # Configs Celery
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
    # Conexão para a API de Pipeline
    AIRFLOW_CONN_PIPELINE_API: http://pipeline-api:8000
    # Habilita Basic Auth para a REST API do Airflow
    AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth"
    AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: '30'
    AIRFLOW__SCHEDULER__JOB_HEARTBEAT_SEC: '30'
    AIRFLOW__SCHEDULER__SCHEDULER_HEARTBEAT_SEC: '30'
  volumes:
    - ./airflow-pipeline/dags:/opt/airflow/dags
    - ./airflow-pipeline/logs:/opt/airflow/logs
    - ./airflow-pipeline/plugins:/opt/airflow/plugins
    - pipeline_data:/opt/airflow/data
    # Permite orquestrar containers Docker no BashOperator
    - /var/run/docker.sock:/var/run/docker.sock
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy
  links:
    - pipeline-api
  user: root

services:
  postgres:
    image: postgres:13
    container_name: airflow-postgres
    env_file:
      - .env
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - airflow-pg-data:/var/lib/postgresql/data
      - ./airflow-pipeline/postgres-init:/docker-entrypoint-initdb.d

  redis: # Necessário apenas para CeleryExecutor
    image: redis:latest
    container_name: airflow-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - airflow-redis-data:/data

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-worker:
    <<: *airflow-common
    container_name: airflow-worker
    command: celery worker # Comando padrão para iniciar um worker celery
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type WorkerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    command: >
      bash -c
      'airflow db init;
       airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin || true'

  pipeline-api:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.api
    container_name: pipeline-api
    env_file:
      - .env
    environment:
      - AIRFLOW_DATA_DIR=/app/data
    ports:
      - "8000:8000"
    volumes:
      # Usa volume nomeado compartilhado
      - pipeline_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

  graphrag:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.graphrag
    image: graphrag:latest
    volumes:
      - pipeline_data:/data
    # Mantém o container vivo para debug; no DAG usaremos DockerOperator para rodar comandos
    entrypoint: ["sleep", "infinity"]

volumes:
  pipeline_data:
    name: pipeline_data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data
  airflow-pg-data:
  airflow-redis-data: