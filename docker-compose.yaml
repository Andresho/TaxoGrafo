# docker-compose.yaml
x-airflow-common: &airflow-common
  # Imagem do Airflow: construir localmente via Dockerfile em airflow-pipeline/Dockerfile
  build:
    context: ./airflow-pipeline
    dockerfile: Dockerfile
  # Se preferir usar imagem customizada já construída, descomente e ajuste:
  # image: minha-imagem-airflow-customizada:latest
  # Ou use imagem oficial (instalará dependências no primeiro 'up', pode ser lento):
  # image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.8.4-python3.9}

  env_file:
    - .env # Carrega variáveis de ambiente como OPENAI_API_KEY e AIRFLOW_UID
  environment:
    &airflow-common-env
    # Configs Core Airflow
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor # Ou LocalExecutor para testes mais simples
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    # Configs de Banco de Dados (Usar seção [database] preferencialmente)
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    # Configs Celery (Se usar CeleryExecutor)
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
    # Conexão para a API de Pipeline
    AIRFLOW_CONN_PIPELINE_API: http://pipeline-api:8000
    # Adicione outras configurações do Airflow aqui se necessário
    # Ex: AIRFLOW__WEBSERVER__SECRET_KEY: "uma_chave_secreta_super_segura" # Gere uma chave aleatória
  volumes:
    # Monta diretórios locais para dentro do container
    - ./airflow-pipeline/dags:/opt/airflow/dags
    - ./airflow-pipeline/logs:/opt/airflow/logs
    - ./airflow-pipeline/plugins:/opt/airflow/plugins
    # Monta apenas subdiretórios de dados para pipeline
    - ./airflow-pipeline/data/input:/opt/airflow/data/input:ro
    - ./airflow-pipeline/data/output:/opt/airflow/data/output
    # Arquivo .env e settings.yaml para configuração do Graphrag
    - ./airflow-pipeline/data/.env:/opt/airflow/data/.env:ro
    - ./airflow-pipeline/graphrag-settings.yaml:/opt/airflow/data/settings.yaml:ro
    # Permite orquestrar containers Docker no BashOperator
    - /var/run/docker.sock:/var/run/docker.sock
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy # Necessário apenas para CeleryExecutor
  # Garante que Airflow possa resolver o endpoint da API de pipeline
  links:
    - pipeline-api
  user: "${AIRFLOW_UID:-50000}" # Garante permissões corretas nos volumes montados

services:
  postgres:
    image: postgres:13
    container_name: airflow-postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - "5434:5432" # Mapeia para 5434 localmente
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - airflow-pg-data:/var/lib/postgresql/data

  redis: # Necessário apenas para CeleryExecutor
    image: redis:latest
    container_name: airflow-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - airflow-redis-data:/data

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver # Comando padrão para iniciar o webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s # Aumenta intervalo para dar tempo de iniciar
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler # Comando padrão para iniciar o scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-worker: # Necessário apenas para CeleryExecutor
    <<: *airflow-common
    container_name: airflow-worker
    command: celery worker # Comando padrão para iniciar um worker celery
    # Ajuste a concorrência se necessário
    # environment:
    #   <<: *airflow-common-env # Herda env vars
    #   CELERY_CONCURRENCY: 4
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type WorkerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    # REMOVIDO: entrypoint: /bin/bash # Usa entrypoint padrão da imagem!
    # Comando para inicializar o DB e criar usuário (ou apenas garantir que existem)
    # || true no final evita falha se já inicializado/usuário existe
    command: >
      bash -c
      'airflow db init;
       airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin || true'
    # Não precisa de restart, é um job one-off
    # depends_on já está no x-airflow-common

  pipeline-api:
    build:
      context: .
      dockerfile: app/Dockerfile
    container_name: pipeline-api
    env_file:
      - .env
    environment:
      # Aponta para os dados montados via volume
      - AIRFLOW_DATA_DIR=/app/data
    ports:
      - "8000:8000"
    volumes:
      # Monta toda a pasta de dados da pipeline
      - ./airflow-pipeline/data:/app/data
    restart: always

volumes:
  airflow-pg-data:
  airflow-redis-data: