sequenceDiagram
    participant User_or_Airflow as "Usuário/Airflow Task"
    participant PipelineAPI as "Pipeline API"
    participant DB as "Banco de Dados <br/> (PipelineBatchJob)"
    participant LLMProvider as "Provedor LLM <br/> (OpenAI Batch API)"

    User_or_Airflow ->> PipelineAPI: POST /pipeline/{run_id}/submit-batch/{batch_type}
    activate PipelineAPI

    PipelineAPI ->> DB: create_or_get_pipeline_batch_job()
    activate DB
    DB -->> PipelineAPI: job_record (status: PENDING_SUBMISSION ou existente)
    deactivate DB

    alt Job já SUBMITTED ou COMPLETED
        PipelineAPI -->> User_or_Airflow: Resposta (Skipped, Batch ID existente)
    else Job PENDING_SUBMISSION (ou resetado)
        PipelineAPI ->> PipelineAPI: task_submit_{batch_type}_batch() <br/> (Prepara requests, formata arquivo .jsonl)
        PipelineAPI ->> LLMProvider: Upload arquivo .jsonl
        activate LLMProvider
        LLMProvider -->> PipelineAPI: provider_file_id
        deactivate LLMProvider

        PipelineAPI ->> LLMProvider: Create Batch Job (com provider_file_id)
        activate LLMProvider
        LLMProvider -->> PipelineAPI: llm_batch_id
        deactivate LLMProvider

        PipelineAPI ->> DB: update_pipeline_batch_job(job_id, status=SUBMITTED, llm_batch_id)
        activate DB
        DB -->> PipelineAPI: Job Atualizado
        deactivate DB
        PipelineAPI -->> User_or_Airflow: Resposta (Submetido, llm_batch_id)
    end
    deactivate PipelineAPI

    %% --- Loop de Polling pelo Airflow HttpSensor ---
    loop Até Batch Concluído ou Falha
        User_or_Airflow ->> PipelineAPI: GET /pipeline/{run_id}/batch-job-status/{batch_type}
        activate PipelineAPI

        PipelineAPI ->> DB: get_pipeline_batch_job()
        activate DB
        DB -->> PipelineAPI: job_record (com llm_batch_id)
        deactivate DB

        alt Job já Processado/Completado internamente
             PipelineAPI -->> User_or_Airflow: Resposta (llm_status: completed)
        else Job Aguardando LLM
            PipelineAPI ->> LLMProvider: Get Batch Status (com llm_batch_id)
            activate LLMProvider
            LLMProvider -->> PipelineAPI: llm_status, output_file_id, error_file_id
            deactivate LLMProvider

            alt LLM Status é "completed"
                PipelineAPI ->> DB: update_pipeline_batch_job(job_id, status=PENDING_PROCESSING)
                activate DB
                DB -->> PipelineAPI: Job Atualizado
                deactivate DB
                PipelineAPI -->> User_or_Airflow: Resposta (llm_status: completed)
            else LLM Status é "failed" ou "cancelled"
                PipelineAPI ->> DB: update_pipeline_batch_job(job_id, status=SUBMISSION_FAILED, error_details)
                activate DB
                DB -->> PipelineAPI: Job Atualizado
                deactivate DB
                PipelineAPI -->> User_or_Airflow: Resposta (llm_status: failed)
            else LLM Status é "pending", "validating", "in_progress"
                PipelineAPI -->> User_or_Airflow: Resposta (llm_status: in_progress)
            end
        end
        deactivate PipelineAPI
    end

    %% --- Processamento dos Resultados ---
    User_or_Airflow ->> PipelineAPI: POST /pipeline/{run_id}/process-batch-results/{batch_type}
    activate PipelineAPI

    PipelineAPI ->> DB: get_pipeline_batch_job()
    activate DB
    DB -->> PipelineAPI: job_record (status: PENDING_PROCESSING, com llm_batch_id, output_file_id)
    deactivate DB

    alt Job já COMPLETED
        PipelineAPI -->> User_or_Airflow: Resposta (Skipped, já processado)
    else Job PENDING_PROCESSING
        PipelineAPI ->> DB: update_pipeline_batch_job(job_id, status=PROCESSING)
        activate DB
        DB -->> PipelineAPI: Job Atualizado
        deactivate DB

        PipelineAPI ->> LLMProvider: Read File (com output_file_id)
        activate LLMProvider
        LLMProvider -->> PipelineAPI: Conteúdo do Arquivo de Resultados
        deactivate LLMProvider

        opt Se error_file_id existir
            PipelineAPI ->> LLMProvider: Read File (com error_file_id)
            activate LLMProvider
            LLMProvider -->> PipelineAPI: Conteúdo do Arquivo de Erros
            deactivate LLMProvider
        end

        PipelineAPI ->> PipelineAPI: batch_utils.process_batch_results() <br/> (Parseia resultados, Prepara dados para o BD)
        
        PipelineAPI ->> DB: Salva dados processados (ex: generated_ucs_raw)
        activate DB
        DB -->> PipelineAPI: Confirmação
        deactivate DB

        PipelineAPI ->> DB: update_pipeline_batch_job(job_id, status=COMPLETED)
        activate DB
        DB -->> PipelineAPI: Job Atualizado
        deactivate DB
        PipelineAPI -->> User_or_Airflow: Resposta (Sucesso, resultados processados)
    end
    deactivate PipelineAPI